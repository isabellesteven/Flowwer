<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Block Diagram Editor</title>
    <!-- Include Konva.js -->
    <script src="https://unpkg.com/konva@7.0.4/konva.min.js"></script>
    <style>
        body {
            margin: 0;
            display: flex;
            height: 100vh;
        }
        
        #palette {
            border: 2px solid grey;
            background-color: lightgrey;
            width: 100px;
            padding: 10px;
            box-shadow: 1px 0 5px rgba(0, 0, 0, 0.1);
        }
        
        #editor {
            flex: 1;
        }
        
    </style>
</head>
<body>
    <div id="palette">
        <!-- Palette stage and layer -->
    </div>
    <div id="editor"></div>
    
    <script>
                 
        // Initialize main stage and layer
        const stage = new Konva.Stage({
            container: 'editor',
            width: window.innerWidth - 100,
            height: window.innerHeight,
            id: 'mainStage'
        });
        
        const layer = new Konva.Layer({id: 'mainLayer'});
        stage.add(layer);
        
        // Initialize palette stage and layer
        const paletteStage = new Konva.Stage({
            container: 'palette',
            width: 100,
            height: window.innerHeight,
            scaleX: 2 / 3,
            scaleY: 2 / 3,
            opacity: 1,
            id: 'paletteStage'
        });
        
        const paletteLayer = new Konva.Layer({id: 'paletteLayer'});
        paletteStage.add(paletteLayer);     
        
        // Function to create a block for the Palette with user-defined attributes
        // Note that a paletteBlock has special abilities to allow itself to be dragged onto the main canvas

        function createPaletteBlock(x, y, numInputPorts, numOutputPorts, blockName) {
            const blockGroup = new Konva.Group({
                x,
                y,
                draggable: true,
            });
            
            const block = new Konva.Rect({
                width: 100,
                height: 50,
                fill: 'lightblue',
            });
            
            // Set custom attributes for the block
            block.setAttr('numInputPorts', numInputPorts);
            block.setAttr('numOutputPorts', numOutputPorts);
            
            const inputPorts = [];
            const outputPorts = [];
            
            // Create input ports
            for (let i = 0; i < numInputPorts; i++) {
                const inputPort = new Konva.Circle({
                    name: 'inputPort', // Added name for easy identification
                    x: 0,
                    y: i * (50 / numInputPorts),
                    radius: 5,
                    fill: 'red',
                    draggable: false,
                });
                
                inputPorts.push(inputPort);
            }
            
            // Create output ports
            for (let i = 0; i < numOutputPorts; i++) {
                const outputPort = new Konva.Circle({
                    name: 'outputPort', // Added name for easy identification
                    x: 100,
                    y: i * (50 / numOutputPorts),
                    radius: 5,
                    fill: 'green',
                    draggable: false,
                });
                
                outputPorts.push(outputPort);
            }
            
            // add the label
            const label = new Konva.Text({
                text: blockName,
                fontSize: 18,
                fontFamily: 'Calibri',
                fill: '#000',
                width: 130,
                padding: 5,
                align: 'center'
            });
            
            blockGroup.add(block, ...inputPorts, ...outputPorts, label);
            blockGroup.id(blockName);
            blockGroup.on('dragstart', (evt) => {
                let group = evt.target;
                if (group.getStage() === paletteStage && group.x() < paletteStage.width()) {
                  let pos = group.position();
                  newbee = group.clone();
                  newbee.position(pos);
                  paletteLayer.add(newbee);
                  paletteLayer.draw();
                  console.log('I am moving', group.getStage().id(), newbee.getStage().id()); 
                }
            } );
            blockGroup.on('dragmove', (evt) => {
                let group = evt.target;
                if (group.getStage() === paletteStage && group.x() > paletteStage.width()) {
                    group.x(0);
                    group.moveTo(layer);
                    console.log('moved to', layer, group.getStage().id());
                    paletteLayer.draw();
                }
            });

            blockGroup.on('dragend', (evt) => {
                let group = evt.target;
                if (group.getLayer() === layer) {
                    console.log('drag ended: moved to', layer, group.getStage().id())
                } else {
                    group.destroy();
                    paletteLayer.draw();
                    layer.draw();
                    console.log('drag ended: not moved')
                }
            });
            return blockGroup;
            
        }
          
        // Set up the Konva rectangle for the draggable block in the palette
        const paletteBlock = createPaletteBlock(10 , 10, 3, 3, 'blockA');
        const paletteBlockB = createPaletteBlock(10 , 10, 3, 3, 'blockB'); 
        paletteBlockB.y(75);
        paletteLayer.add(paletteBlock, paletteBlockB);
        paletteLayer.draw();

    </script>
</body>
</html>
