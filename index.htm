<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Block Diagram Editor</title>
  <!-- Include Konva.js -->
  <script src="https://unpkg.com/konva@7.0.4/konva.min.js"></script>
  <style>
    body {
      margin: 0;
      display: flex;
      height: 100vh;
    }

    #palette {
      width: 100px;
      background: #461b1b;
      padding: 10px;
      box-shadow: 1px 0 5px rgba(0, 0, 0, 0.1);
    }

    #editor {
      flex: 1;
    }
  </style>
</head>
<body>
  <div id="palette">
    <div id="draggableBlock" draggable="true">Block</div>
  </div>
  <div id="editor"></div>
  <div id="twopi"></div>
  

  <script>
    // Initialize Konva
    const stage = new Konva.Stage({
      container: 'editor',
      width: window.innerWidth - 100,
      height: window.innerHeight,
    });

    const layer = new Konva.Layer();
    stage.add(layer);
    const dragLayer = new Konva.Layer();
    stage.add(dragLayer);

    const paletteStage = new Konva.Stage({
      container: 'palette',
      width: 100,
      height: window.innerHeight,
    });
    const paletteLayer = new Konva.Layer();
    paletteStage.add(paletteLayer);

    const connectionsLayer = new Konva.Layer();
    stage.add(connectionsLayer);


    // Function to create a block with user-defined attributes
    function createBlock(x, y, numInputPorts, numOutputPorts, blockName) {
      const blockGroup = new Konva.Group({
        x,
        y,
        draggable: true,
      });

      const block = new Konva.Rect({
        width: 100,
        height: 50,
        fill: 'lightblue',
      });

      // Set custom attributes for the block
      block.setAttr('numInputPorts', numInputPorts);
      block.setAttr('numOutputPorts', numOutputPorts);

      const inputPorts = [];
      const outputPorts = [];

      // Create input ports
      for (let i = 0; i < numInputPorts; i++) {
        const inputPort = new Konva.Circle({
          x: 0,
          y: i * (50 / numInputPorts),
          radius: 5,
          fill: 'red',
          draggable: false,
        });
        inputPorts.push(inputPort);
      }

      // Create output ports
      for (let i = 0; i < numOutputPorts; i++) {
        const outputPort = new Konva.Circle({
          x: 100,
          y: i * (50 / numOutputPorts),
          radius: 5,
          fill: 'green',
          draggable: false,
        });
        outputPorts.push(outputPort);
      }

      // add the label
       const label = new Konva.Text({
        text: blockName,
        fontSize: 18,
        fontFamily: 'Calibri',
        fill: '#000',
        width: 130,
        padding: 5,
        align: 'center'
    });

      blockGroup.add(block, label, ...inputPorts, ...outputPorts);
      return blockGroup;
/*       layer.add(blockGroup);
      layer.draw();

      // Add event listeners for connecting blocks
      inputPort.on('dragmove', updateConnection);
      outputPort.on('dragmove', updateConnection); */
    }

    // Add a draggable block with user-defined attributes to the palette

    pp = createBlock(0, 0, 2,3, "blocky")
    paletteLayer.add(pp);
    paletteLayer.draw();

    const draggableBlock = document.getElementById('draggableBlock');
    draggableBlock.addEventListener('dragstart', (event) => {
      event.dataTransfer.setData('text/plain', 'block');
    });

    // Handle drop event on the editor
    stage.container().addEventListener('drop', (event) => {
      event.preventDefault();

      stage.setPointersPositions(event);
      const position = stage.getPointerPosition();
      // Create a block with 2 input ports and 3 output ports
      let pp = createBlock(position.x, position.y, 2, 3, 'blocky');
      layer.add(pp);
      layer.draw();
    });

    stage.container().addEventListener('dragover', (event) => {
      event.preventDefault();
    });

    // Function to update connections between blocks
    function updateConnection() {
      connectionsLayer.destroyChildren();

      layer.children.each((blockGroup) => {
        const outputPort = blockGroup.findOne('.outputPort');
        if (outputPort) {
          const outputPortPosition = outputPort.getAbsolutePosition();

          layer.children.each((otherBlockGroup) => {
            const inputPort = otherBlockGroup.findOne('.inputPort');
            if (inputPort) {
              const inputPortPosition = inputPort.getAbsolutePosition();

              const line = new Konva.Line({
                points: [outputPortPosition.x, outputPortPosition.y, inputPortPosition.x, inputPortPosition.y],
                stroke: 'black',
                strokeWidth: 2,
              });

              connectionsLayer.add(line);
            }
          });
        }
      });

      stage.batchDraw();
    }
  </script>
</body>
</html
